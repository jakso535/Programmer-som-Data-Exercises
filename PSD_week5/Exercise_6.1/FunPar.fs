// Implementation file for parser generated by fsyacc
module FunPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "FunPar.fsy"

 (* File Fun/FunPar.fsy 
    Parser for micro-ML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;

# 15 "FunPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | NOT
  | THEN
  | TRUE
  | ANON
  | FUN
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_ANON
    | TOKEN_FUN
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_AnonExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | EQ  -> 3 
  | NE  -> 4 
  | GT  -> 5 
  | LT  -> 6 
  | GE  -> 7 
  | LE  -> 8 
  | PLUS  -> 9 
  | MINUS  -> 10 
  | TIMES  -> 11 
  | DIV  -> 12 
  | MOD  -> 13 
  | ELSE  -> 14 
  | END  -> 15 
  | FALSE  -> 16 
  | IF  -> 17 
  | IN  -> 18 
  | LET  -> 19 
  | NOT  -> 20 
  | THEN  -> 21 
  | TRUE  -> 22 
  | ANON  -> 23 
  | FUN  -> 24 
  | CSTBOOL _ -> 25 
  | NAME _ -> 26 
  | CSTINT _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_EQ 
  | 4 -> TOKEN_NE 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_LT 
  | 7 -> TOKEN_GE 
  | 8 -> TOKEN_LE 
  | 9 -> TOKEN_PLUS 
  | 10 -> TOKEN_MINUS 
  | 11 -> TOKEN_TIMES 
  | 12 -> TOKEN_DIV 
  | 13 -> TOKEN_MOD 
  | 14 -> TOKEN_ELSE 
  | 15 -> TOKEN_END 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_IF 
  | 18 -> TOKEN_IN 
  | 19 -> TOKEN_LET 
  | 20 -> TOKEN_NOT 
  | 21 -> TOKEN_THEN 
  | 22 -> TOKEN_TRUE 
  | 23 -> TOKEN_ANON 
  | 24 -> TOKEN_FUN 
  | 25 -> TOKEN_CSTBOOL 
  | 26 -> TOKEN_NAME 
  | 27 -> TOKEN_CSTINT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_AtExpr 
    | 19 -> NONTERM_AtExpr 
    | 20 -> NONTERM_AtExpr 
    | 21 -> NONTERM_AtExpr 
    | 22 -> NONTERM_AtExpr 
    | 23 -> NONTERM_AppExpr 
    | 24 -> NONTERM_AppExpr 
    | 25 -> NONTERM_AnonExpr 
    | 26 -> NONTERM_Const 
    | 27 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | ANON  -> "ANON" 
  | FUN  -> "FUN" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | ANON  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;22us;65535us;0us;2us;7us;8us;9us;10us;11us;12us;13us;14us;32us;15us;33us;16us;34us;17us;35us;18us;36us;19us;37us;20us;38us;21us;39us;22us;40us;23us;41us;24us;42us;25us;47us;26us;48us;27us;51us;28us;52us;29us;54us;30us;60us;31us;24us;65535us;0us;4us;4us;56us;5us;57us;7us;4us;9us;4us;11us;4us;13us;4us;32us;4us;33us;4us;34us;4us;35us;4us;36us;4us;37us;4us;38us;4us;39us;4us;40us;4us;41us;4us;42us;4us;47us;4us;48us;4us;51us;4us;52us;4us;54us;4us;60us;4us;22us;65535us;0us;5us;7us;5us;9us;5us;11us;5us;13us;5us;32us;5us;33us;5us;34us;5us;35us;5us;36us;5us;37us;5us;38us;5us;39us;5us;40us;5us;41us;5us;42us;5us;47us;5us;48us;5us;51us;5us;52us;5us;54us;5us;60us;5us;22us;65535us;0us;6us;7us;6us;9us;6us;11us;6us;13us;6us;32us;6us;33us;6us;34us;6us;35us;6us;36us;6us;37us;6us;38us;6us;39us;6us;40us;6us;41us;6us;42us;6us;47us;6us;48us;6us;51us;6us;52us;6us;54us;6us;60us;6us;24us;65535us;0us;43us;4us;43us;5us;43us;7us;43us;9us;43us;11us;43us;13us;43us;32us;43us;33us;43us;34us;43us;35us;43us;36us;43us;37us;43us;38us;43us;39us;43us;40us;43us;41us;43us;42us;43us;47us;43us;48us;43us;51us;43us;52us;43us;54us;43us;60us;43us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;26us;51us;74us;97us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;12us;1us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;1us;1us;2us;2us;23us;2us;3us;24us;1us;4us;1us;5us;12us;5us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;1us;5us;12us;5us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;1us;5us;12us;5us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;1us;6us;12us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;12us;7us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;12us;7us;8us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;12us;7us;8us;9us;9us;10us;11us;12us;13us;14us;15us;16us;17us;12us;7us;8us;9us;10us;10us;11us;12us;13us;14us;15us;16us;17us;12us;7us;8us;9us;10us;11us;11us;12us;13us;14us;15us;16us;17us;12us;7us;8us;9us;10us;11us;12us;12us;13us;14us;15us;16us;17us;12us;7us;8us;9us;10us;11us;12us;13us;13us;14us;15us;16us;17us;12us;7us;8us;9us;10us;11us;12us;13us;14us;14us;15us;16us;17us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;15us;16us;17us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;16us;17us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;17us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;20us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;20us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;21us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;21us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;22us;12us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;25us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;2us;20us;21us;2us;20us;21us;1us;20us;1us;20us;1us;20us;1us;21us;1us;21us;1us;21us;1us;21us;1us;22us;1us;22us;1us;23us;1us;24us;1us;25us;1us;25us;1us;25us;1us;26us;1us;27us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;17us;19us;22us;25us;27us;29us;42us;44us;57us;59us;72us;74us;87us;100us;113us;126us;139us;152us;165us;178us;191us;204us;217us;230us;243us;256us;269us;282us;295us;308us;310us;312us;314us;316us;318us;320us;322us;324us;326us;328us;330us;332us;334us;337us;340us;342us;344us;346us;348us;350us;352us;354us;356us;358us;360us;362us;364us;366us;368us;370us;|]
let _fsyacc_action_rows = 63
let _fsyacc_actionTableElements = [|8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;0us;49152us;12us;32768us;0us;3us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;0us;16385us;5us;16386us;1us;54us;19us;45us;25us;62us;26us;44us;27us;61us;5us;16387us;1us;54us;19us;45us;25us;62us;26us;44us;27us;61us;0us;16388us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;12us;32768us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;21us;9us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;12us;32768us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;14us;11us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;11us;16389us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;3us;16390us;11us;34us;12us;35us;13us;36us;3us;16391us;11us;34us;12us;35us;13us;36us;3us;16392us;11us;34us;12us;35us;13us;36us;0us;16393us;0us;16394us;0us;16395us;9us;16396us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;9us;16397us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;5us;16398us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;5us;16399us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;5us;16400us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;5us;16401us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;12us;32768us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;18us;48us;12us;32768us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;15us;49us;12us;32768us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;18us;52us;12us;32768us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;15us;53us;12us;32768us;2us;55us;3us;37us;4us;38us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;9us;16409us;5us;39us;6us;40us;7us;41us;8us;42us;9us;32us;10us;33us;11us;34us;12us;35us;13us;36us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;0us;16402us;0us;16403us;1us;32768us;26us;46us;2us;32768us;3us;47us;26us;50us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;0us;16404us;1us;32768us;3us;51us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;0us;16405us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;0us;16406us;0us;16407us;0us;16408us;1us;32768us;26us;59us;1us;32768us;24us;60us;8us;32768us;1us;54us;10us;13us;17us;7us;19us;45us;23us;58us;25us;62us;26us;44us;27us;61us;0us;16410us;0us;16411us;|]
let _fsyacc_actionTableRowOffsets = [|0us;9us;10us;23us;24us;30us;36us;37us;46us;59us;68us;81us;90us;102us;111us;115us;119us;123us;124us;125us;126us;136us;146us;152us;158us;164us;170us;183us;196us;209us;222us;235us;245us;254us;263us;272us;281us;290us;299us;308us;317us;326us;335us;344us;345us;346us;348us;351us;360us;369us;370us;372us;381us;390us;391us;400us;401us;402us;403us;405us;407us;416us;417us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;1us;1us;6us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;7us;8us;3us;2us;2us;4us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;3us;3us;3us;4us;4us;5us;6us;6us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;16388us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16402us;16403us;65535us;65535us;65535us;65535us;16404us;65535us;65535us;65535us;16405us;65535us;16406us;16407us;16408us;65535us;65535us;65535us;16410us;16411us;|]
let _fsyacc_reductions = lazy [|
# 265 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 274 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "FunPar.fsy"
                                                               _1 
                   )
# 34 "FunPar.fsy"
                 : Absyn.expr));
# 285 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "FunPar.fsy"
                                                               _1                     
                   )
# 38 "FunPar.fsy"
                 : Absyn.expr));
# 296 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "FunPar.fsy"
                                                               _1                     
                   )
# 39 "FunPar.fsy"
                 : Absyn.expr));
# 307 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "FunPar.fsy"
                                                               _1                     
                   )
# 40 "FunPar.fsy"
                 : Absyn.expr));
# 318 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            let _4 = parseState.GetInput(4) :?> Absyn.expr in
            let _6 = parseState.GetInput(6) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "FunPar.fsy"
                                                               If(_2, _4, _6)         
                   )
# 41 "FunPar.fsy"
                 : Absyn.expr));
# 331 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "FunPar.fsy"
                                                               Prim("-", CstI 0, _2)  
                   )
# 42 "FunPar.fsy"
                 : Absyn.expr));
# 342 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "FunPar.fsy"
                                                               Prim("+",  _1, _3)     
                   )
# 43 "FunPar.fsy"
                 : Absyn.expr));
# 354 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "FunPar.fsy"
                                                               Prim("-",  _1, _3)     
                   )
# 44 "FunPar.fsy"
                 : Absyn.expr));
# 366 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "FunPar.fsy"
                                                               Prim("*",  _1, _3)     
                   )
# 45 "FunPar.fsy"
                 : Absyn.expr));
# 378 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FunPar.fsy"
                                                               Prim("/",  _1, _3)     
                   )
# 46 "FunPar.fsy"
                 : Absyn.expr));
# 390 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FunPar.fsy"
                                                               Prim("%",  _1, _3)     
                   )
# 47 "FunPar.fsy"
                 : Absyn.expr));
# 402 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "FunPar.fsy"
                                                               Prim("=",  _1, _3)     
                   )
# 48 "FunPar.fsy"
                 : Absyn.expr));
# 414 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "FunPar.fsy"
                                                               Prim("<>", _1, _3)     
                   )
# 49 "FunPar.fsy"
                 : Absyn.expr));
# 426 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FunPar.fsy"
                                                               Prim(">",  _1, _3)     
                   )
# 50 "FunPar.fsy"
                 : Absyn.expr));
# 438 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FunPar.fsy"
                                                               Prim("<",  _1, _3)     
                   )
# 51 "FunPar.fsy"
                 : Absyn.expr));
# 450 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "FunPar.fsy"
                                                               Prim(">=", _1, _3)     
                   )
# 52 "FunPar.fsy"
                 : Absyn.expr));
# 462 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "FunPar.fsy"
                                                               Prim("<=", _1, _3)     
                   )
# 53 "FunPar.fsy"
                 : Absyn.expr));
# 474 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FunPar.fsy"
                                                               _1                     
                   )
# 57 "FunPar.fsy"
                 : Absyn.expr));
# 485 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "FunPar.fsy"
                                                               Var _1                 
                   )
# 58 "FunPar.fsy"
                 : Absyn.expr));
# 496 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Absyn.expr in
            let _6 = parseState.GetInput(6) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FunPar.fsy"
                                                               Let(_2, _4, _6)        
                   )
# 59 "FunPar.fsy"
                 : Absyn.expr));
# 509 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> Absyn.expr in
            let _7 = parseState.GetInput(7) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "FunPar.fsy"
                                                               Letfun(_2, _3, _5, _7) 
                   )
# 60 "FunPar.fsy"
                 : Absyn.expr));
# 523 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FunPar.fsy"
                                                               _2                     
                   )
# 61 "FunPar.fsy"
                 : Absyn.expr));
# 534 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "FunPar.fsy"
                                                               Call(_1, _2)           
                   )
# 65 "FunPar.fsy"
                 : Absyn.expr));
# 546 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FunPar.fsy"
                                                               Call(_1, _2)           
                   )
# 66 "FunPar.fsy"
                 : Absyn.expr));
# 558 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FunPar.fsy"
                                                               Fun(_2, _4)            
                   )
# 71 "FunPar.fsy"
                 : Absyn.expr));
# 570 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FunPar.fsy"
                                                               CstI(_1)               
                   )
# 75 "FunPar.fsy"
                 : Absyn.expr));
# 581 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "FunPar.fsy"
                                                               CstB(_1)               
                   )
# 76 "FunPar.fsy"
                 : Absyn.expr));
|]
# 593 "FunPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    engine lexer lexbuf 0 :?> _
